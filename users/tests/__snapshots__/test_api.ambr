# serializer version: 1
# name: test_guardians_query_project_user_with_global_view_families_perm
  dict({
    'data': dict({
      'guardians': dict({
        'edges': list([
          dict({
            'node': dict({
              'email': 'debbie77@example.com',
              'firstName': 'Guardian having children in own and another project',
              'lastName': 'Should be visible 1/2',
              'phoneNumber': '(971)824-0675x0649',
              'relationships': dict({
                'edges': list([
                  dict({
                    'node': dict({
                      'child': dict({
                        'birthyear': 2019,
                        'name': 'Cynthia Holmes',
                        'project': dict({
                          'year': 2020,
                        }),
                      }),
                      'type': 'PARENT',
                    }),
                  }),
                ]),
              }),
            }),
          }),
          dict({
            'node': dict({
              'email': 'michellewalker@example.net',
              'firstName': 'Another project own guardian',
              'lastName': 'Should be visible 2/2',
              'phoneNumber': '420.928.1307',
              'relationships': dict({
                'edges': list([
                  dict({
                    'node': dict({
                      'child': dict({
                        'birthyear': 2022,
                        'name': 'Sara Johnson',
                        'project': dict({
                          'year': 2030,
                        }),
                      }),
                      'type': 'OTHER_RELATION',
                    }),
                  }),
                ]),
              }),
            }),
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_my_admin_profile_project_admin[has_also_model_perm]
  dict({
    'data': dict({
      'myAdminProfile': dict({
        'projects': dict({
          'edges': list([
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'Helsingin kaupunginorkesteri',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'Helsingin Kaupunginteatteri, Suomen Kansallisteatteri, Svenska Teatern, Teatteri ILMI Ö., Q-teatteri ja Nukketeatteri Sampo',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'Cirko - uuden sirkuksen keskus, Hotelli- ja ravintolamuseo, Suomen valokuvataiteen museo, Tanssin talo, Tanssiteatteri Hurjaruuth ja Teatterimuseo',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'Arkkitehtuurimuseo, Designmuseo, Helsingin kaupunginmuseo, Suomen kansallismuseo, Suomen kulttuuriperintökasvatuksen seura ja Tiedemuseo Liekki',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'Helsingin kirjasto- ja liikuntapalvelut',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'HAM Helsingin taidemuseo, Amos Rex, Sointi Jazz Orchestra, UMO Helsinki Jazz Orchestra ja Kansallisgalleria: Ateneumin taidemuseo, Nykytaiteen museo Kiasma ja Sinebrychoffin taidemuseo',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'project where no object perms',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'project where base admin object perm but no other object perms',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'project where base admin object perm and other object perms',
              }),
            }),
          ]),
        }),
      }),
    }),
  })
# ---
# name: test_my_admin_profile_project_admin[no_model_perm]
  dict({
    'data': dict({
      'myAdminProfile': dict({
        'projects': dict({
          'edges': list([
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': False,
                  'manageEventGroups': False,
                  'publish': False,
                }),
                'name': 'project where base admin object perm but no other object perms',
              }),
            }),
            dict({
              'node': dict({
                'myPermissions': dict({
                  'canSendToAllInProject': True,
                  'manageEventGroups': True,
                  'publish': True,
                }),
                'name': 'project where base admin object perm and other object perms',
              }),
            }),
          ]),
        }),
      }),
    }),
  })
# ---
# name: test_my_communication_subscriptions_query_as_logged_in[False]
  dict({
    'data': dict({
      'myCommunicationSubscriptions': dict({
        'firstName': 'Michael',
        'hasAcceptedCommunication': False,
        'language': 'fi',
        'lastName': 'Patton',
      }),
    }),
  })
# ---
# name: test_my_communication_subscriptions_query_as_logged_in[True]
  dict({
    'data': dict({
      'myCommunicationSubscriptions': dict({
        'firstName': 'Michael',
        'hasAcceptedCommunication': True,
        'language': 'fi',
        'lastName': 'Patton',
      }),
    }),
  })
# ---
# name: test_my_communication_subscriptions_query_with_auth_verification_token
  dict({
    'data': dict({
      'myCommunicationSubscriptions': dict({
        'firstName': 'Michael',
        'hasAcceptedCommunication': True,
        'language': 'fi',
        'lastName': 'Patton',
      }),
    }),
  })
# ---
# name: test_my_profile_no_profile
  dict({
    'data': dict({
      'myProfile': None,
    }),
  })
# ---
# name: test_my_profile_query
  dict({
    'data': dict({
      'myProfile': dict({
        'email': 'michellewalker@example.net',
        'firstName': 'Robert',
        'hasAcceptedCommunication': False,
        'language': 'FI',
        'languagesSpokenAtHome': dict({
          'edges': list([
          ]),
        }),
        'lastName': 'Crane',
        'phoneNumber': '303.746.6972x70117',
        'relationships': dict({
          'edges': list([
            dict({
              'node': dict({
                'child': dict({
                  'birthyear': 2019,
                  'name': 'Ashley Hernandez',
                  'postalCode': '28130',
                }),
                'type': 'OTHER_GUARDIAN',
              }),
            }),
          ]),
        }),
      }),
    }),
  })
# ---
# name: test_my_profile_query_email[]
  dict({
    'data': dict({
      'myProfile': dict({
        'email': 'user@example.com',
      }),
    }),
  })
# ---
# name: test_my_profile_query_email[guardian@example.com]
  dict({
    'data': dict({
      'myProfile': dict({
        'email': 'guardian@example.com',
      }),
    }),
  })
# ---
# name: test_request_email_change_token_mutation
  dict({
    'data': dict({
      'requestEmailUpdateToken': dict({
        'email': 'new-email@kummilapset.fi',
        'emailUpdateTokenRequested': True,
      }),
    }),
  })
# ---
# name: test_update_my_communication_subscriptions_as_logged_in[False]
  dict({
    'data': dict({
      'updateMyCommunicationSubscriptions': dict({
        'guardian': dict({
          'firstName': 'Michael',
          'hasAcceptedCommunication': True,
          'language': 'fi',
          'lastName': 'Patton',
        }),
      }),
    }),
  })
# ---
# name: test_update_my_communication_subscriptions_as_logged_in[True]
  dict({
    'data': dict({
      'updateMyCommunicationSubscriptions': dict({
        'guardian': dict({
          'firstName': 'Michael',
          'hasAcceptedCommunication': False,
          'language': 'fi',
          'lastName': 'Patton',
        }),
      }),
    }),
  })
# ---
# name: test_update_my_communication_subscriptions_returns_errors_without_required_args[variables0]
  dict({
    'data': None,
    'errors': list([
      dict({
        'extensions': dict({
          'code': 'GENERAL_ERROR',
        }),
        'locations': list([
          dict({
            'column': 3,
            'line': 3,
          }),
        ]),
        'message': "Variable '$input' got invalid value {}; Field 'hasAcceptedCommunication' of required type 'Boolean!' was not provided.",
      }),
    ]),
  })
# ---
# name: test_update_my_communication_subscriptions_returns_errors_without_required_args[variables1]
  dict({
    'data': None,
    'errors': list([
      dict({
        'extensions': dict({
          'code': 'GENERAL_ERROR',
        }),
        'locations': list([
          dict({
            'column': 3,
            'line': 3,
          }),
        ]),
        'message': "Variable '$input' of required type 'UpdateMyCommunicationSubscriptionsMutationInput!' was not provided.",
      }),
    ]),
  })
# ---
# name: test_update_my_communication_subscriptions_returns_errors_without_required_args[variables2]
  dict({
    'data': None,
    'errors': list([
      dict({
        'extensions': dict({
          'code': 'GENERAL_ERROR',
        }),
        'locations': list([
          dict({
            'column': 3,
            'line': 3,
          }),
        ]),
        'message': "Variable '$input' got invalid value {'authToken': 'what ever'}; Field 'hasAcceptedCommunication' of required type 'Boolean!' was not provided.",
      }),
    ]),
  })
# ---
# name: test_update_my_communication_subscriptions_with_auth_verification_token[False]
  dict({
    'data': dict({
      'updateMyCommunicationSubscriptions': dict({
        'guardian': dict({
          'firstName': 'Michael',
          'hasAcceptedCommunication': True,
          'language': 'fi',
          'lastName': 'Patton',
        }),
      }),
    }),
  })
# ---
# name: test_update_my_communication_subscriptions_with_auth_verification_token[True]
  dict({
    'data': dict({
      'updateMyCommunicationSubscriptions': dict({
        'guardian': dict({
          'firstName': 'Michael',
          'hasAcceptedCommunication': False,
          'language': 'fi',
          'lastName': 'Patton',
        }),
      }),
    }),
  })
# ---
# name: test_update_my_email_mutation[changed-email@kummilapset.fi-True]
  dict({
    'data': dict({
      'updateMyEmail': dict({
        'myProfile': dict({
          'email': 'changed-email@kummilapset.fi',
        }),
      }),
    }),
  })
# ---
# name: test_update_my_profile_mutation
  dict({
    'data': dict({
      'updateMyProfile': dict({
        'myProfile': dict({
          'firstName': 'Updated First Name',
          'hasAcceptedCommunication': False,
          'language': 'EN',
          'languagesSpokenAtHome': dict({
            'edges': list([
              dict({
                'node': dict({
                  'alpha3Code': 'swe',
                }),
              }),
              dict({
                'node': dict({
                  'alpha3Code': 'fin',
                }),
              }),
            ]),
          }),
          'lastName': 'Updated Last Name',
          'phoneNumber': 'Updated phone number',
        }),
      }),
    }),
  })
# ---
